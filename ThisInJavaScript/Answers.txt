:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    How this in JavaScript differ from this in Java ?
:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

This in Java and JavaScript refers the current object. This in Java can used in variable, argument and return value.

---------------------------------------------------------------------------------------------------------------------

in JavaScript, we use the this keyword as a shortcut, a referent it refers to an object
 that is, the subject in context, or the subject of the executing code. The this keyword
 is used to refer to an object that the function (where this is used) is bound to. The
 this keyword not only refers to the object but it also contains the value of the object.

 The this reference ALWAYS refers to (and holds the value of) an object—a singular object
 and it is usually used inside a function or a method, although it can be used outside a
 function in the global scope. Note that when we use strict mode, this holds the value of
 undefined in global functions and in anonymous functions that are not bound to any object.
 Indeed, this is really just a shortcut reference for the “antecedent object”— the invoking
 object.

--->The Biggest Gotcha with JavaScript “this” keyword<---

If you understand this one principle of JavaScript’s this, you will understand the “this”
keyword with clarity: this is not assigned a value until an object invokes the function where
this is defined. Let’s call the function where this is defined the “this Function.”

Even though it appears this refers to the object where it is defined, it is not until an object
invokes the this Function that this is actually assigned a value. And the value it is assigned
is based exclusively on the object that invokes the this Function. this has the value of the invoking
object in most circumstances. However, there are a few scenarios where this does not have the value
of the invoking object.


--->The use of this in the global scope<---

In the global scope, when the code is executing in the browser, all global variables and functions
are defined on the window object. Therefore, when we use this in a global function, it refers to
(and has the value of) the global window object (not in strict mode though, as noted earlier) that
is the main container of the entire JavaScript application or web page.

Solution to fix this when a method is passed as a callback function:
Since we really want this.data to refer to the data property on the user object, we can use the
Bind (), Apply (), or Call () method to specifically set the value of this.

--->Fix this inside closure<----
Another instance when this is misunderstood is when we use an inner method (a closure). It is
important to take note that closures cannot access the outer function’s this variable by using the
this keyword because the this variable is accessible only by the function itself, not by inner
functions.

This inside the anonymous function cannot access the outer function’s this, so it is bound to the global
window object, when strict mode is not being used.

Solution to maintain this inside anonymous functions:
To fix the problem we can use a common practice in JavaScript and set the this value to another variable
before we enter the method.

--->Fix this when method is assigned to a variable<---
The this value escapes our imagination and is bound to another object, if we assign a method that uses
this to a variable.

Solution for maintaining this when method is assigned to a variable:
We can fix this problem by specifically setting the this value with the bind method.

 // Bind the showData method to the user object​
    var showUserData = user.showData.bind (user);

--->Fix this when borrowing methods<----

// We have two objects. One of them has a method called avg () that the other doesn't have​
// So we will borrow the (avg()) method​
    var gameController = {
    scores  :[20, 34, 55, 46, 77],
    avgScore:null,
    players :[
    {name:"Tommy", playerID:987, age:23},
    {name:"Pau", playerID:87, age:33}
    ]
    }
​
    var appController = {
    scores  :[900, 845, 809, 950],
    avgScore:null,
    avg     :function () {
​
    var sumOfScores = this.scores.reduce (function (prev, cur, index, array) {
    return prev + cur;
    });
​
    this.avgScore = sumOfScores / this.scores.length;
    }
    }
​
    //If we run the code below,​
    // the gameController.avgScore property will be set to the average score from the appController object "scores" array​

    // Don't run this code, for it is just for illustration; we want the appController.avgScore to remain null​
    gameController.avgScore = appController.avg();

    The avg method’s “this” keyword will not refer to the gameController object, it will refer to the appController
    object because it is being invoked on the appController.

    Solution for fixing this when borrowing methods:
    To fix the issue and make sure that this inside the appController.avg () method refers to gameController, we can
    use the apply () method thus:

      // Note that we are using the apply () method, so the 2nd argument has to be an array—the arguments to pass to the appController.avg () method.​
        appController.avg.apply (gameController, gameController.scores);
    ​
        // The avgScore property was successfully set on the gameController object, even though we borrowed the avg () method from the appController object​
        console.log (gameController.avgScore); // 46.4​
    ​
        // appController.avgScore is still null; it was not updated, only gameController.avgScore was updated​
        console.log (appController.avgScore); // null

     The gameController object borrows the appController’s avg () method. The “this” value inside the
     appController.avg () method will be set to the gameController object because we pass the gameController
     object as the first parameter to the apply () method. The first parameter in the apply method always
     sets the value of “this” explicitly.


:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    About methods call(), apply(), bind().
:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

call()
------------------------------------------------------------------------
En anden this objekt kan tildeles ved kald af en eksisterende funktion.
dette refererer til det aktuelle objekt, den kaldende objekt.
Med call() kan du skrive en metode én gang og derefter arve det i et andet objekt,
uden at skulle omskrive metoden til det nye objekt.

Eksempel:

function Product(name, price)
{
    this.name = name;
    this.price = price;
}

function Food(name, price)
{
    Product.call(this, name, price); // Product initializes the properties name and price to Food object.
    this.category = "Food";
}

var tomato = new Food("Cherry tomato", 20);

console.log(tomato);

Output:
######################
Food { name: 'Cherry tomato', price: 20, category: 'Food' }
######################


apply()
------------------------------------------------------------------------
apply() metoden minder meget om call() metoden, undtagen for typen af argumenter det understøtter.
Du kan bruge en array argument i stedet for en navngiven sæt parametre.

Eksempel:

function Product(name, price)
{
    this.name = name;
    this.price = price;
}

function Food(name, price)
{
    Product.apply(this, [name, price]);
}

var apple = new Food('Red apple', 20);

console.log(apple);

Output:
######################
Food { name: 'Red apple', price: 20 }
######################


bind()
------------------------------------------------------------------------
bind() metoden sikrer at man får fat i den værdi i den specifike scope man ønsker.

Hvis man i en scope har en global værdi med fx navnet x, og en lokal variable med samme navn i en
functionen, og skal returnere den ved at sige return this.x;
Og erklære funktionen til en variabel i scopen, og skal have retur værdien for funktionen, skal man bruge bind() metoden.

Eksempel:

name = "Lindevangkole"; // global value

var school = {
    name: "CPH Business",
    city: "Lyngby",
    getSchool: function(){
        return this.name;
    }
};

var schoolName = school.getSchool;
var boundSchoolName = schoolName.bind(school);

console.log( schoolName() );
console.log( boundSchoolName() );


:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    Why we use ( var self = this ) in our third semester controller ?
:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

var self = this;

self bliver brugt til at opretholde en reference til den oprindelige this i den globale scope.

